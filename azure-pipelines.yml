trigger:
- master

pool:
  vmImage: 'macos-latest'

steps:

# Add all Apple signing material
- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'MacAnthony2.p12'
    certPwd: '$(CertificatePassword)'
    keychain: 'temp'
 
- task: InstallAppleProvisioningProfile@1
  inputs:
    provisioningProfileLocation: 'secureFiles'
    provProfileSecureFile: 'JellyfinMacProvision.provisionprofile'

# Compile the .app bundle
- task: Xcode@5
  inputs:
    actions: 'build'
    configuration: 'Release'
    sdk: 'macosx10.15'
    xcWorkspacePath: '**/*.xcodeproj'
    packageApp: false
    signingOption: 'default'
    destinationPlatformOption: 'macOS'
    useXcpretty: true

# Get the latest Jellyfin release for mac
- task: DownloadGitHubRelease@0
  inputs:
    connection: 'AzureGH'
    userRepository: 'jellyfin/jellyfin'
    defaultVersionType: 'latest'
    itemPattern: '*macos.tar.gz'
    downloadPath: '$(System.DefaultWorkingDirectory)/build/Release/'

# Extract them in to the working directory
- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '*.gz'
    destinationFolder: '$(System.DefaultWorkingDirectory)/build/Release/'
    cleanDestinationFolder: false
      
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Rename the bundle
      echo "[INFO] Renaming Jellyfin Server.app as Jellyfin.app..."
      mv "Jellyfin Server.app" "Jellyfin.app"
      
      # Read the extracted Jellyfin binary folder name, get version
      echo "[INFO] Reading details from Jellyfin release..."
      dir_name="$( find . -type d -name "jellyfin_*" -exec basename {} \; )"
      version="$(awk -F'_' '{ print $NF }' <<<"${dir_name}")"
      
      # Update the version number in the plist to be accurate
      echo "[INFO] Updating .plist for version $version"
      plutil -replace CFBundleVersion -string "$version" "Jellyfin.app/Contents/Info.plist"
      
      # Copy the latest Jellyfin binary in to the correct folder
      echo "[INFO] Copying Jellyfin Server into bundle..."
      cp -R "$dir_name/." "Jellyfin.app/Contents/MacOS/"
      
      # Move the web files to the resource folder
      echo "[INFO] Moving jellyfin-web to resources..."
      mv "Jellyfin.app/Contents/MacOS/jellyfin-web" "Jellyfin.app/Contents/Resources/"
      
      # Setup some variables
      APP_NAME="Jellyfin.app"
      ENTITLEMENTS="$BUILD_SOURCESDIRECTORY/deployment/Jellyfin_Server.entitlements"
      SIGNING_IDENTITY="739426E195172DE44249548E1DC1CBFA797AEF3A" # matches Keychain Access certificate name
      
      # Iterate through contents that should be signed, and sign them
      find "$APP_NAME/Contents/MacOS" -type f | while read fname; do
          echo "[INFO] Signing $fname"
          codesign --force --timestamp --options=runtime --entitlements "$ENTITLEMENTS" --sign $SIGNING_IDENTITY "$fname"
      done
      
      find "$APP_NAME/Contents/Frameworks" -type f | while read fname; do
          echo "[INFO] Signing $fname"
          codesign --force --timestamp --options=runtime --entitlements "$ENTITLEMENTS" --sign $SIGNING_IDENTITY "$fname"
      done
      
      echo "[INFO] Signing complete app bundle..."
      codesign --force --timestamp --options=runtime --entitlements "$ENTITLEMENTS" --sign $SIGNING_IDENTITY "$APP_NAME"
    workingDirectory: '$(System.DefaultWorkingDirectory)/build/Release/'

- task: UseNode@1
  inputs:
    version: '12.x'

- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(Build.SourcesDirectory)'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo "[INFO] Creating DMG..."
      npx appdmg "$BUILD_SOURCESDIRECTORY/deployment/jfdmg.json" "Jellyfin.dmg"
      echo "[INFO] Uploading for notarization..."
      xcrun altool --notarize-app --primary-bundle-id "jellyfin-server-macos" --username "$APPLEDEVACCOUNT" --password "$APPLEDEVPASSWORD" --file "Jellyfin.dmg"
    workingDirectory: '$(System.DefaultWorkingDirectory)/build/Release/'

- task: PublishBuildArtifacts@1
  displayName: 'Bundle Release'
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/build/Release/'
    ArtifactName: 'jellyfin-macos-wrapper.zip'
    publishLocation: 'Container'